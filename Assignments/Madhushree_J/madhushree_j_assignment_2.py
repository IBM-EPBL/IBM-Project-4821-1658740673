# -*- coding: utf-8 -*-
"""Madhushree J_Assignment-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lBDC6DGUP7A_hKqcSmrHRYpp-_9cCXUE
"""

#AFTER DOWNLOADING THE DATASET ,IMPORT NECESSARY LIBRARIES

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 2 LOAD THE DATASET

df=pd.read_csv("/content/Churn_Modelling (2).csv")
df.head()

df.tail()

# 3 PERFORM VARIOUS VISUALIZATIONS

# 3.1 UNIVARIANT ANALYSIS

plt.figure()
df.Balance.plot(kind='hist' ,figsize=(12,6))

#distribution plot
plt.figure() 
sns.distplot(df.Tenure)

plt.figure()
sns.countplot(df.Gender)

# 3.2 BIVARIANT ANALYSIS

df.groupby(['Gender'])['EstimatedSalary'].mean().plot(kind='bar',ylabel='avg salary',figsize=(12,8))

# 3.3 MULTI-VARIANT ANALYSIS

plt.scatter(x='CreditScore',y='EstimatedSalary',data=df,c='g',s=50)
plt.scatter(x='CreditScore',y='Balance',data=df,c='b',marker='*')

# 4 DESCRIPTIVE STATISTICS ON THE DATASET

df.describe()

# 5 HANDLING THE MISSING VALUES

df.isnull().sum()

df.plot()

df['Age'].value_counts()

df['NumOfProducts'].value_counts()

df['Age'].unique()

df['NumOfProducts'].unique()

df['CreditScore'].unique()

df['Balance'].unique()

df['Balance'].value_counts()

df['EstimatedSalary'].value_counts()

# 6 OUTLIERS

df['EstimatedSalary'].unique()

# 7 CHECK FOR CATEGORICAL VALUES AND PERFORM ENCODING

df.info()

from sklearn.preprocessing import LabelEncoder, StandardScaler
label_encoder = LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])

df.head()

label_encoder = LabelEncoder()
df['Geography'] = label_encoder.fit_transform(df['Geography'])

df.head()

df['Geography'].unique()

x=df.iloc[:,:-1]
y=df.iloc[:,-1]

# 8 SPLITTING DATA INTO INDEPENDENT AND DEPENDENT VARIABLES

x.head()

y.head()

df.info()

df.drop('Surname', axis=1, inplace=True)

x=df.iloc[:,6:10]
y=df.iloc[:,6:10]

#9 SPLITTING THE DATA INTO TRAIN AND TEST

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)

X_train.head()

#10 SCALING INDEPENDENT VARIABLES

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train= sc.fit_transform(X_train)
print(X_train)